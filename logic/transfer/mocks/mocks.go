// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package transfer

import (
	"context"
	"wallet/dto"
	"wallet/logic/transfer"

	mock "github.com/stretchr/testify/mock"
)

// NewMockITransferLogic creates a new instance of MockITransferLogic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransferLogic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransferLogic {
	mock := &MockITransferLogic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockITransferLogic is an autogenerated mock type for the ITransferLogic type
type MockITransferLogic struct {
	mock.Mock
}

type MockITransferLogic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransferLogic) EXPECT() *MockITransferLogic_Expecter {
	return &MockITransferLogic_Expecter{mock: &_m.Mock}
}

// CreateTransfer provides a mock function for the type MockITransferLogic
func (_mock *MockITransferLogic) CreateTransfer(context1 context.Context, createTransferRequest *dto.CreateTransferRequest, createTransferOpts *transfer.CreateTransferOpts) (*dto.CreateTransferResponse, error) {
	ret := _mock.Called(context1, createTransferRequest, createTransferOpts)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 *dto.CreateTransferResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateTransferRequest, *transfer.CreateTransferOpts) (*dto.CreateTransferResponse, error)); ok {
		return returnFunc(context1, createTransferRequest, createTransferOpts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateTransferRequest, *transfer.CreateTransferOpts) *dto.CreateTransferResponse); ok {
		r0 = returnFunc(context1, createTransferRequest, createTransferOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateTransferResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.CreateTransferRequest, *transfer.CreateTransferOpts) error); ok {
		r1 = returnFunc(context1, createTransferRequest, createTransferOpts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITransferLogic_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type MockITransferLogic_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//   - context1 context.Context
//   - createTransferRequest *dto.CreateTransferRequest
//   - createTransferOpts *transfer.CreateTransferOpts
func (_e *MockITransferLogic_Expecter) CreateTransfer(context1 interface{}, createTransferRequest interface{}, createTransferOpts interface{}) *MockITransferLogic_CreateTransfer_Call {
	return &MockITransferLogic_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", context1, createTransferRequest, createTransferOpts)}
}

func (_c *MockITransferLogic_CreateTransfer_Call) Run(run func(context1 context.Context, createTransferRequest *dto.CreateTransferRequest, createTransferOpts *transfer.CreateTransferOpts)) *MockITransferLogic_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CreateTransferRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CreateTransferRequest)
		}
		var arg2 *transfer.CreateTransferOpts
		if args[2] != nil {
			arg2 = args[2].(*transfer.CreateTransferOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockITransferLogic_CreateTransfer_Call) Return(createTransferResponse *dto.CreateTransferResponse, err error) *MockITransferLogic_CreateTransfer_Call {
	_c.Call.Return(createTransferResponse, err)
	return _c
}

func (_c *MockITransferLogic_CreateTransfer_Call) RunAndReturn(run func(context1 context.Context, createTransferRequest *dto.CreateTransferRequest, createTransferOpts *transfer.CreateTransferOpts) (*dto.CreateTransferResponse, error)) *MockITransferLogic_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}
