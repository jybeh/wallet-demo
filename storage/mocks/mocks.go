// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"
	"database/sql"
	"wallet/storage"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIAccountDAO creates a new instance of MockIAccountDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAccountDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAccountDAO {
	mock := &MockIAccountDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAccountDAO is an autogenerated mock type for the IAccountDAO type
type MockIAccountDAO struct {
	mock.Mock
}

type MockIAccountDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAccountDAO) EXPECT() *MockIAccountDAO_Expecter {
	return &MockIAccountDAO_Expecter{mock: &_m.Mock}
}

// FindByAccountID provides a mock function for the type MockIAccountDAO
func (_mock *MockIAccountDAO) FindByAccountID(context1 context.Context, s string) (*storage.Account, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for FindByAccountID")
	}

	var r0 *storage.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*storage.Account, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *storage.Account); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAccountDAO_FindByAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAccountID'
type MockIAccountDAO_FindByAccountID_Call struct {
	*mock.Call
}

// FindByAccountID is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIAccountDAO_Expecter) FindByAccountID(context1 interface{}, s interface{}) *MockIAccountDAO_FindByAccountID_Call {
	return &MockIAccountDAO_FindByAccountID_Call{Call: _e.mock.On("FindByAccountID", context1, s)}
}

func (_c *MockIAccountDAO_FindByAccountID_Call) Run(run func(context1 context.Context, s string)) *MockIAccountDAO_FindByAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAccountDAO_FindByAccountID_Call) Return(account *storage.Account, err error) *MockIAccountDAO_FindByAccountID_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockIAccountDAO_FindByAccountID_Call) RunAndReturn(run func(context1 context.Context, s string) (*storage.Account, error)) *MockIAccountDAO_FindByAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function for the type MockIAccountDAO
func (_mock *MockIAccountDAO) UpdateBalance(context1 context.Context, account *storage.Account, n int64) error {
	ret := _mock.Called(context1, account, n)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.Account, int64) error); ok {
		r0 = returnFunc(context1, account, n)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAccountDAO_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type MockIAccountDAO_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - context1 context.Context
//   - account *storage.Account
//   - n int64
func (_e *MockIAccountDAO_Expecter) UpdateBalance(context1 interface{}, account interface{}, n interface{}) *MockIAccountDAO_UpdateBalance_Call {
	return &MockIAccountDAO_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", context1, account, n)}
}

func (_c *MockIAccountDAO_UpdateBalance_Call) Run(run func(context1 context.Context, account *storage.Account, n int64)) *MockIAccountDAO_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.Account
		if args[1] != nil {
			arg1 = args[1].(*storage.Account)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIAccountDAO_UpdateBalance_Call) Return(err error) *MockIAccountDAO_UpdateBalance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAccountDAO_UpdateBalance_Call) RunAndReturn(run func(context1 context.Context, account *storage.Account, n int64) error) *MockIAccountDAO_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITransactionDAO creates a new instance of MockITransactionDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransactionDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransactionDAO {
	mock := &MockITransactionDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockITransactionDAO is an autogenerated mock type for the ITransactionDAO type
type MockITransactionDAO struct {
	mock.Mock
}

type MockITransactionDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransactionDAO) EXPECT() *MockITransactionDAO_Expecter {
	return &MockITransactionDAO_Expecter{mock: &_m.Mock}
}

// NewMockITransferDAO creates a new instance of MockITransferDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransferDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransferDAO {
	mock := &MockITransferDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockITransferDAO is an autogenerated mock type for the ITransferDAO type
type MockITransferDAO struct {
	mock.Mock
}

type MockITransferDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransferDAO) EXPECT() *MockITransferDAO_Expecter {
	return &MockITransferDAO_Expecter{mock: &_m.Mock}
}

// FindByReferenceID provides a mock function for the type MockITransferDAO
func (_mock *MockITransferDAO) FindByReferenceID(ctx context.Context, referenceID string) (*storage.Transfer, error) {
	ret := _mock.Called(ctx, referenceID)

	if len(ret) == 0 {
		panic("no return value specified for FindByReferenceID")
	}

	var r0 *storage.Transfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*storage.Transfer, error)); ok {
		return returnFunc(ctx, referenceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *storage.Transfer); ok {
		r0 = returnFunc(ctx, referenceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Transfer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, referenceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITransferDAO_FindByReferenceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByReferenceID'
type MockITransferDAO_FindByReferenceID_Call struct {
	*mock.Call
}

// FindByReferenceID is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceID string
func (_e *MockITransferDAO_Expecter) FindByReferenceID(ctx interface{}, referenceID interface{}) *MockITransferDAO_FindByReferenceID_Call {
	return &MockITransferDAO_FindByReferenceID_Call{Call: _e.mock.On("FindByReferenceID", ctx, referenceID)}
}

func (_c *MockITransferDAO_FindByReferenceID_Call) Run(run func(ctx context.Context, referenceID string)) *MockITransferDAO_FindByReferenceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockITransferDAO_FindByReferenceID_Call) Return(transfer *storage.Transfer, err error) *MockITransferDAO_FindByReferenceID_Call {
	_c.Call.Return(transfer, err)
	return _c
}

func (_c *MockITransferDAO_FindByReferenceID_Call) RunAndReturn(run func(ctx context.Context, referenceID string) (*storage.Transfer, error)) *MockITransferDAO_FindByReferenceID_Call {
	_c.Call.Return(run)
	return _c
}

// RunInTransaction provides a mock function for the type MockITransferDAO
func (_mock *MockITransferDAO) RunInTransaction(fn storage.TxFn, opts ...*sql.TxOptions) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(fn, opts)
	} else {
		tmpRet = _mock.Called(fn)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunInTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(storage.TxFn, ...*sql.TxOptions) error); ok {
		r0 = returnFunc(fn, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockITransferDAO_RunInTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInTransaction'
type MockITransferDAO_RunInTransaction_Call struct {
	*mock.Call
}

// RunInTransaction is a helper method to define mock.On call
//   - fn storage.TxFn
//   - opts ...*sql.TxOptions
func (_e *MockITransferDAO_Expecter) RunInTransaction(fn interface{}, opts ...interface{}) *MockITransferDAO_RunInTransaction_Call {
	return &MockITransferDAO_RunInTransaction_Call{Call: _e.mock.On("RunInTransaction",
		append([]interface{}{fn}, opts...)...)}
}

func (_c *MockITransferDAO_RunInTransaction_Call) Run(run func(fn storage.TxFn, opts ...*sql.TxOptions)) *MockITransferDAO_RunInTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 storage.TxFn
		if args[0] != nil {
			arg0 = args[0].(storage.TxFn)
		}
		var arg1 []*sql.TxOptions
		var variadicArgs []*sql.TxOptions
		if len(args) > 1 {
			variadicArgs = args[1].([]*sql.TxOptions)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockITransferDAO_RunInTransaction_Call) Return(err error) *MockITransferDAO_RunInTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockITransferDAO_RunInTransaction_Call) RunAndReturn(run func(fn storage.TxFn, opts ...*sql.TxOptions) error) *MockITransferDAO_RunInTransaction_Call {
	_c.Call.Return(run)
	return _c
}
